generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  v                  Int            @default(0) @map("__v")
  email              String         @unique(map: "email")
  name               String
  roles              String[]
  source             String         @default("in-app")
  isVerified         Boolean        @default(false)
  password           UserPasswords?
  subscriptionPlan   String
  isRemoved          Boolean        @default(false)
  verificationCode   String?
  verificationExpiry DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  files              Files[]
}

model Files {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  originalFileName String
  newFileName      String
  filePath         String
  userId           String   @db.ObjectId
  user             Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  v                Int      @default(0) @map("__v")
  fileSize         BigInt
  fileType         String
  tags             String[]
  totalPages       Int      @default(0)
  totalChunks      Int      @default(0)
  isRemoved        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UserPasswords {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  v               Int       @default(0) @map("__v")
  hashedPassword  String
  resetToken      String?
  tokenExpiryDate DateTime?
  userId          String    @unique() @db.ObjectId
  user            Users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isRemoved       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ChatHistory {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId          String       @db.ObjectId
  chatType        String
  featured        Boolean      @default(false)
  question        String
  answer          String
  model           String
  referencesCount Int
  references      References[]
  files           File[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

type References {
  fileName String
  fileId   String @db.ObjectId
  pageNo   Int
}

type File {
  fileId     String       @db.ObjectId
  fileName   String
  fileType   String
  totalPages Int          @default(1)
  pageRanges PageRanges[]
}

type PageRanges {
  startPageNo Int
  endPageNo   Int
}

model LLMModels {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  modelName  String   @unique
  modelId    String   @unique
  apiKey     String
  modelShort String
  vendor     String
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
